#!/usr/bin/python

import os
import sys
import rpyc
import atexit
import signal
import logging
import subprocess

pidfile = '/var/tmp/server_rpycd.pid'

def delpid():
    os.remove(pidfile)

def create_daemon(logfile = '/var/log/tests/server_rpycd.log'):
    umask = 0
    workdir = '/'
    stdout_log = stderr_log = logfile
    try:
        pid = os.fork()
    except OSError, e:
        raise Exception, "%s [%d]" % (e.strerror, e.errno)
    if 0 == pid:
        os.setsid()
        signal.signal(signal.SIGHUP, signal.SIG_IGN)
        try:
            pid = os.fork()
        except OSError, e:
            raise Exception, "%s [%d]" % (e.strerror, e.errno)
        if 0 == pid:
            os.chdir(workdir)
            os.umask(umask)
        else:
            sys.exit(0)
    else:
        sys.exit(0)

    si = open('/dev/null', 'r')
    so = open(stdout_log, 'a+', 0)
    se = open(stderr_log, 'a+', 0)
    os.dup2(si.fileno(), sys.stdin.fileno())
    os.dup2(so.fileno(), sys.stdout.fileno())
    os.dup2(se.fileno(), sys.stderr.fileno())

    pid = str(os.getpid())
    file(pidfile, 'w+').write("%s\n" % pid)
    atexit.register(delpid)
    signal.signal(signal.SIGTERM, lambda signum, stack_frame: sys.exit(1))


class run_command(rpyc.Service):
    def on_connect(self):
        self.logger = logging.getLogger('rpyc_service')
        self.lhndlr = logging.FileHandler('/var/log/tests/server_rpycd.log')
        formatter = logging.Formatter('%(asctime)s %(levelname)s %(message)s')
        self.lhndlr.setFormatter(formatter)
        self.logger.addHandler(self.lhndlr)
        self.logger.setLevel(logging.DEBUG)

    def on_disconnect(self):
        self.lhndlr.close()

    def exposed_run(self, command):
        self.logger.info("Running command: %s" % command)
        p = subprocess.Popen(command, shell=True, stdout=subprocess.PIPE, \
            stderr=subprocess.PIPE)
        pout, perr = p.communicate()
        ps = p.returncode
        if ps != 0:
            self.logger.error("returncode is %d" % ps )
            if pout != None:
                self.logger.error(pout)
            if perr != None:
                self.logger.error(perr)
        else:
            self.logger.info("returncode is %d" % ps )
            if pout != None:
                self.logger.info(pout)
            if perr != None:
                self.logger.info(perr)
        return ( ps, pout, perr )

    def exposed_fileopen(self, filename, mode = 'r'):
        return open(filename, mode)


if __name__ == '__main__':
    os.system("test -d /var/log/tests || mkdir -p /var/log/tests 2>/dev/null")
    try:
        pf = file(pidfile, 'r')
        pid = int(pf.read().strip())
        pf.close()
    except IOError:
        pid = None
    if pid:
        msg = "pidfile %s already exists. Daemon already running?\n" % pidfile
        sys.stderr.write(msg)
        sys.exit(1)
    else:
        create_daemon()
        from rpyc.utils.server import ThreadedServer
        t = ThreadedServer(run_command, port = 18861 )
        t.start()
